DIGITAL CLOCK SOURCE CODE

module clk_div(
input clk,reset,
output reg [3:0] an,
output reg [6:0] seg
    );
    reg clk_out;
    reg [25:0] count=0;
    reg [5:0] sec=0,min=0,hour=0;
    parameter max=25000000-1; 
    always@( posedge clk or posedge reset)
    begin
    if(reset)
       begin
         count<=0;
         clk_out<=0;
       end
    else
       begin
         if(count==max)
             begin
                clk_out<=~clk_out;
                count<=0;
             end
         else
             begin
                count<=count+1;
             end
       end
    end
    always@(posedge clk_out or posedge reset)
    begin
    if(reset)
         begin
            sec<=0;
            min<=0;
            hour<=0;
         end
    else
         begin
            if(sec==59)
               begin
                    sec<=0;
                    if(min==59)
                       begin
                           min<=0;
                           if(hour==23)
                              begin
                                  hour<=0;
                              end
                           else
                              begin
                                  hour<=hour+1;
                              end
                       end
                    else
                       begin
                           min<=min+1;
                       end
               end
            else
               begin
                    sec<=sec+1;
               end
         end
    end
    // Display multiplexing
    reg [15:0] refresh_counter = 0;
    reg [1:0] digit=0 ;
    reg [3:0] current_digit=0;
    wire [3:0] sec_tens = sec / 10;
    wire [3:0] sec_ones = sec % 10;
    wire [3:0] min_tens  = min / 10;
    wire [3:0] min_ones  = min % 10;

    always @(posedge clk) begin
        refresh_counter <= refresh_counter + 1;
        if (refresh_counter == 50_000) begin
            digit <= digit + 1;
            refresh_counter <= 0;
        end
    end

  always @(*) begin
    case (digit)
        2'd0: begin an = 4'b1000; current_digit = sec_ones; end  // Right
        2'd1: begin an = 4'b0100; current_digit = sec_tens; end
        2'd2: begin an = 4'b0010; current_digit = min_ones; end
        2'd3: begin an = 4'b0001; current_digit = min_tens; end  // Left
    endcase
end


    // 7 segment
always @(*) begin
    case (current_digit)
        4'd0: seg = 7'b0000001;  
        4'd1: seg = 7'b1001111; 
        4'd2: seg = 7'b0010010;  
        4'd3: seg = 7'b0000110;  
        4'd4: seg = 7'b1001100;  
        4'd5: seg = 7'b0100100;  
        4'd6: seg = 7'b0100000;  
        4'd7: seg = 7'b0001111;  
        4'd8: seg = 7'b0000000;  
        4'd9: seg = 7'b0000100;  
      default:seg = 7'b1111111;  
    endcase
end


endmodule


CONSTRAINTS (XDC)

# Clock
set_property -dict { PACKAGE_PIN N11 IOSTANDARD LVCMOS33 } [get_ports { clk }];

# Reset (if using a pushbutton)
set_property -dict { PACKAGE_PIN L14 IOSTANDARD LVCMOS33 PULLDOWN true } [get_ports { reset }];


# 7-segment display segment lines
set_property -dict { PACKAGE_PIN G2 IOSTANDARD LVCMOS33 } [get_ports { seg[6] }];
set_property -dict { PACKAGE_PIN G1 IOSTANDARD LVCMOS33 } [get_ports { seg[5] }];
set_property -dict { PACKAGE_PIN H5 IOSTANDARD LVCMOS33 } [get_ports { seg[4] }];
set_property -dict { PACKAGE_PIN H4 IOSTANDARD LVCMOS33 } [get_ports { seg[3] }];
set_property -dict { PACKAGE_PIN J5 IOSTANDARD LVCMOS33 } [get_ports { seg[2] }];
set_property -dict { PACKAGE_PIN J4 IOSTANDARD LVCMOS33 } [get_ports { seg[1] }];
set_property -dict { PACKAGE_PIN H2 IOSTANDARD LVCMOS33 } [get_ports { seg[0] }];

# 7-segment digit selectors (anodes)
set_property -dict { PACKAGE_PIN F2 IOSTANDARD LVCMOS33 } [get_ports { an[0] }];
set_property -dict { PACKAGE_PIN E1 IOSTANDARD LVCMOS33 } [get_ports { an[1] }];
set_property -dict { PACKAGE_PIN G5 IOSTANDARD LVCMOS33 } [get_ports { an[2] }];
set_property -dict { PACKAGE_PIN G4 IOSTANDARD LVCMOS33 } [get_ports { an[3] }];
